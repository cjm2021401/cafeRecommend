#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("myapp:server");
var https = require("https");
var fs=require("fs");

const domain = "도메인 입력";
const sslport = 3000;

const option = {
  ca: fs.readFileSync("/etc/letsencrypt/live/" + domain + "/fullchain.pem"),
  key: fs
    .readFileSync(
      path.resolve(
        process.cwd(),
        "/etc/letsencrypt/live/" + domain + "/privkey.pem"
      ),
      "utf8"
    )
    .toString(),
  cert: fs
    .readFileSync(
      path.resolve(
        process.cwd(),
        "/etc/letsencrypt/live/" + domain + "/cert.pem"
      ),
      "utf8"
    )
    .toString(),
};

/**
 * Create HTTPS server.
 */
https.createServer(option, app).listen(sslport, () => {
  console.log(`[HTTPS] Server is started on port ${sslport}`);
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.on("error", onError);
server.on("listening", onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
